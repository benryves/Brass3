//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Core {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Documentation {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Documentation() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Core.Documentation", typeof(Documentation).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inserts a breakpoint at the current program counter address..
        /// </summary>
        internal static string BreakpointDescription {
            get {
                return ResourceManager.GetString("BreakpointDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some debugging emulators support loading lists of breakpoints from an external file.
        ///The compiler records a list of breakpoints that can be accessed by a plugin that can export such a list of breakpoints..
        /// </summary>
        internal static string BreakpointRemarks {
            get {
                return ResourceManager.GetString("BreakpointRemarks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a patch file for use with Emukon&apos;s debugger..
        /// </summary>
        internal static string EmukonPatchDescription {
            get {
                return ResourceManager.GetString("EmukonPatchDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This plugin generates an Emukon patch file.
        ///Emukon patch files can describe labels, execution breakpoints and variables (8-bit byte, 16-bit word and 32-bit word variables are supported).
        ///The patch file should be saved in the &quot;Patches&quot; directory inside Emukon&apos;s installation directory..
        /// </summary>
        internal static string EmukonPatchRemarks {
            get {
                return ResourceManager.GetString("EmukonPatchRemarks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Runs an external program of your choice, passing the name of the generated binary as an argument..
        /// </summary>
        internal static string ExternalProgramDescription {
            get {
                return ResourceManager.GetString("ExternalProgramDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To use this plugin you need to define two labels; one called &lt;c&gt;Debugger.Path&lt;/c&gt; that contains the full path of the debugger application and another named &lt;c&gt;Debugger.Args&lt;/c&gt; containing the command-line arguments to pass to the application.
        ///
        ///You can use Visual Studio style macros (for example, $(TargetPath)) in these strings. They are case sensitive..
        /// </summary>
        internal static string ExternalProgramRemarks {
            get {
                return ResourceManager.GetString("ExternalProgramRemarks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Brass has very primitive debugging currently, so this functionality is liable to change..
        /// </summary>
        internal static string ExternalProgramWarning {
            get {
                return ResourceManager.GetString("ExternalProgramWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Force labels to the global scope..
        /// </summary>
        internal static string GlobalDescription {
            get {
                return ResourceManager.GetString("GlobalDescription", resourceCulture);
            }
        }
    }
}
